// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stripe_customers.sql

package orm

import (
	"context"
	"database/sql"
)

const deleteStripeCustomer = `-- name: DeleteStripeCustomer :exec
DELETE FROM stripe_customers
WHERE user_id = $1
`

func (q *Queries) DeleteStripeCustomer(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteStripeCustomer, userID)
	return err
}

const getStripeCustomerByUserID = `-- name: GetStripeCustomerByUserID :one
SELECT user_id, stripe_customer_id, email, default_payment_id, payment_method_type, bank_last4, bank_name, is_verified, created_at, updated_at FROM stripe_customers
WHERE user_id = $1
`

func (q *Queries) GetStripeCustomerByUserID(ctx context.Context, userID string) (*StripeCustomer, error) {
	row := q.db.QueryRow(ctx, getStripeCustomerByUserID, userID)
	var i StripeCustomer
	err := row.Scan(
		&i.UserID,
		&i.StripeCustomerID,
		&i.Email,
		&i.DefaultPaymentID,
		&i.PaymentMethodType,
		&i.BankLast4,
		&i.BankName,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertStripeCustomer = `-- name: InsertStripeCustomer :exec
INSERT INTO stripe_customers (
    user_id,
    stripe_customer_id,
    email,
    default_payment_id,
    payment_method_type,
    bank_last4,
    bank_name,
    is_verified
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
ON CONFLICT (user_id) DO UPDATE
SET
    stripe_customer_id = EXCLUDED.stripe_customer_id,
    email = EXCLUDED.email,
    default_payment_id = EXCLUDED.default_payment_id,
    payment_method_type = EXCLUDED.payment_method_type,
    bank_last4 = EXCLUDED.bank_last4,
    bank_name = EXCLUDED.bank_name,
    is_verified = EXCLUDED.is_verified,
    updated_at = NOW()
`

type InsertStripeCustomerParams struct {
	UserID            string         `db:"user_id" json:"UserID"`
	StripeCustomerID  string         `db:"stripe_customer_id" json:"StripeCustomerID"`
	Email             sql.NullString `db:"email" json:"Email"`
	DefaultPaymentID  sql.NullString `db:"default_payment_id" json:"DefaultPaymentID"`
	PaymentMethodType sql.NullString `db:"payment_method_type" json:"PaymentMethodType"`
	BankLast4         sql.NullString `db:"bank_last4" json:"BankLast4"`
	BankName          sql.NullString `db:"bank_name" json:"BankName"`
	IsVerified        sql.NullBool   `db:"is_verified" json:"IsVerified"`
}

func (q *Queries) InsertStripeCustomer(ctx context.Context, arg InsertStripeCustomerParams) error {
	_, err := q.db.Exec(ctx, insertStripeCustomer,
		arg.UserID,
		arg.StripeCustomerID,
		arg.Email,
		arg.DefaultPaymentID,
		arg.PaymentMethodType,
		arg.BankLast4,
		arg.BankName,
		arg.IsVerified,
	)
	return err
}

const updateStripeCustomerDefaultPayment = `-- name: UpdateStripeCustomerDefaultPayment :exec
UPDATE stripe_customers
SET
    default_payment_id = $2,
    updated_at = NOW()
WHERE user_id = $1
`

type UpdateStripeCustomerDefaultPaymentParams struct {
	UserID           string         `db:"user_id" json:"UserID"`
	DefaultPaymentID sql.NullString `db:"default_payment_id" json:"DefaultPaymentID"`
}

func (q *Queries) UpdateStripeCustomerDefaultPayment(ctx context.Context, arg UpdateStripeCustomerDefaultPaymentParams) error {
	_, err := q.db.Exec(ctx, updateStripeCustomerDefaultPayment, arg.UserID, arg.DefaultPaymentID)
	return err
}
