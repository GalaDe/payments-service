// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package orm

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, user_id, amount, currency, plaid_account_id, plaid_item_id, stripe_customer_id, stripe_payment_id, status, created_at, updated_at FROM payments ORDER BY created_at DESC
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]*Payment, error) {
	rows, err := q.db.Query(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.PlaidAccountID,
			&i.PlaidItemID,
			&i.StripeCustomerID,
			&i.StripePaymentID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, user_id, amount, currency, plaid_account_id, plaid_item_id, stripe_customer_id, stripe_payment_id, status, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id uuid.UUID) (*Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.PlaidAccountID,
		&i.PlaidItemID,
		&i.StripeCustomerID,
		&i.StripePaymentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertPayment = `-- name: InsertPayment :exec
INSERT INTO payments (
    user_id, amount, currency, plaid_account_id,
    plaid_item_id, stripe_customer_id, stripe_payment_id, status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
`

type InsertPaymentParams struct {
	UserID           string         `db:"user_id" json:"UserID"`
	Amount           int64          `db:"amount" json:"Amount"`
	Currency         string         `db:"currency" json:"Currency"`
	PlaidAccountID   sql.NullString `db:"plaid_account_id" json:"PlaidAccountID"`
	PlaidItemID      sql.NullString `db:"plaid_item_id" json:"PlaidItemID"`
	StripeCustomerID sql.NullString `db:"stripe_customer_id" json:"StripeCustomerID"`
	StripePaymentID  sql.NullString `db:"stripe_payment_id" json:"StripePaymentID"`
	Status           string         `db:"status" json:"Status"`
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) error {
	_, err := q.db.Exec(ctx, insertPayment,
		arg.UserID,
		arg.Amount,
		arg.Currency,
		arg.PlaidAccountID,
		arg.PlaidItemID,
		arg.StripeCustomerID,
		arg.StripePaymentID,
		arg.Status,
	)
	return err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments SET status = $2, updated_at = NOW() WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID     uuid.UUID `db:"id" json:"ID"`
	Status string    `db:"status" json:"Status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.ID, arg.Status)
	return err
}
