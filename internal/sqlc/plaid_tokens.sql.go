// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plaid_tokens.sql

package orm

import (
	"context"
)

const deletePlaidToken = `-- name: DeletePlaidToken :exec
DELETE FROM plaid_tokens
WHERE user_id = $1
`

func (q *Queries) DeletePlaidToken(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deletePlaidToken, userID)
	return err
}

const getPlaidTokenByUserID = `-- name: GetPlaidTokenByUserID :one
SELECT access_token, account_id, item_id
FROM plaid_tokens
WHERE user_id = $1
`

type GetPlaidTokenByUserIDRow struct {
	AccessToken string `db:"access_token" json:"AccessToken"`
	AccountID   string `db:"account_id" json:"AccountID"`
	ItemID      string `db:"item_id" json:"ItemID"`
}

func (q *Queries) GetPlaidTokenByUserID(ctx context.Context, userID string) (*GetPlaidTokenByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getPlaidTokenByUserID, userID)
	var i GetPlaidTokenByUserIDRow
	err := row.Scan(&i.AccessToken, &i.AccountID, &i.ItemID)
	return &i, err
}

const upsertPlaidToken = `-- name: UpsertPlaidToken :exec
INSERT INTO plaid_tokens (user_id, access_token, account_id, item_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id) DO UPDATE
SET access_token = EXCLUDED.access_token,
    account_id = EXCLUDED.account_id,
    item_id = EXCLUDED.item_id
`

type UpsertPlaidTokenParams struct {
	UserID      string `db:"user_id" json:"UserID"`
	AccessToken string `db:"access_token" json:"AccessToken"`
	AccountID   string `db:"account_id" json:"AccountID"`
	ItemID      string `db:"item_id" json:"ItemID"`
}

func (q *Queries) UpsertPlaidToken(ctx context.Context, arg UpsertPlaidTokenParams) error {
	_, err := q.db.Exec(ctx, upsertPlaidToken,
		arg.UserID,
		arg.AccessToken,
		arg.AccountID,
		arg.ItemID,
	)
	return err
}
